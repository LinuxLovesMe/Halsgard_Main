<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hero_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>obj_moved</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initializing basic parametres
event_inherited();

grav = 0.5;
vert_speed = 0;
move_speed = 5;
jump_speed = 15;

jumped = false;
onPlatform = false;

maxenergy = 10;
medical = 0;
maxhealth = 4;

enum weapons
{
    weapon_none, 
    weapon_fire, 
    weapon_ice, 
    weapon_supra
};

weapon = weapons.weapon_none;

color_warning = c_orange;
color_danger = make_color_hsv(0, 250, 180);

lerp_value = 0;
colour_to_find = shader_get_uniform(shader_lerp, "f_Colour1");

state = "falling"

outsouled = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lerp-effect while damaged

lerp_value = 1;
maxhealth --;
state = "falling";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Position on ground
event_inherited();

if(outsouled)
{
    gravity = 0;
    onGround = false;
}

if (y &gt; obj_for_standing_on.y 
    and y &lt; obj_for_standing_on.y + vspeed + 3
    and onGround)
{
    if(!outsouled)
        y = obj_for_standing_on.y; 
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State = Idle

if (state == "idle")
{
    image_speed = 0.04;
    if(onGround){
        sprite_index = spr_hero_idle;
        
        if(keyboard_check(ord('A')) xor keyboard_check(vk_left))
            state = "left";
            
        if(keyboard_check(ord('D')) xor keyboard_check(vk_right))
            state = "right";
            
        if(keyboard_check_pressed(ord('1')))
            if(!outsouled)
                state = "outsouled";
    }
    else
        state = "falling";
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State = Falling

if (state == "falling")
{
    image_speed = 0;
    sprite_index = spr_hero_jump;
    image_index = 4;
    
    if (onGround)    
        state = "idle";
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State = Left

if (state == "left")
{
    if(x &gt; 60)
        x -= move_speed;
    image_speed = 0.2;
    if(onGround)
    {
        sprite_index = spr_hero_walk;
        image_xscale = 1;
        if(keyboard_check_released(ord('A')) xor keyboard_check_released(vk_left))
            state = "idle";   
    }else
        state = "falling";
    
        
    if (!audio_is_playing(walk_sound))
        audio_play_sound(walk_sound, 10, false);
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State = Right

if (state == "right")
{   
    if(x &lt; (room_width - 60))
        x += move_speed;
    image_speed = 0.2;
    if(onGround)
    {
        sprite_index = spr_hero_walk;
        image_xscale = -1;
        if(keyboard_check_released(ord('D')) xor keyboard_check_released(vk_right))
            state = "idle";
    
    }else
        state = "falling";
    
    if (!audio_is_playing(walk_sound))
        audio_play_sound(walk_sound, 10, false);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State = Jump

if (state == "jump")
{
    if(keyboard_check(ord('A')) xor keyboard_check(vk_left))
    {
        x -= 5;
        image_xscale = 1;
    }
    if(keyboard_check(ord('D')) xor keyboard_check(vk_right))
    {
        x += 5;
        image_xscale = -1;
    }          
        
    image_speed = 0.3;
    sprite_index = spr_hero_jump;
    
    if (image_index &gt;= 4 and !onGround)
        image_index = 4; //Image_index for falling movement
    
    if (image_index &gt;= 4 and image_index &lt; 5 and onGround)
    {
        //image_index = 5; //Turn main_hero to idle animation
        state = "idle";
    }
    
    if (image_index &gt; 5 and onGround)
        state = "idle";
    
    if (!onGround)
        audio_stop_sound(walk_sound);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State = outsouled

if (state == "outsouled")
{
    sprite_index = spr_hero_death; 
    if(image_index &gt;= 5)
    {
        outsouled = true;
        image_speed = 0;
        state = "outsouled_move";
        
        instance_create(x, y, obj_hero_body);
        obj_hero_body.image_xscale = image_xscale;
    }
    else
        image_speed = 0.2;  
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State = outsouled_move

if(state == "outsouled_move")
{
    sprite_index = spr_hero_idle;
    image_speed = 0;
    image_index = 0;
    
    hspeed = 0;
    vspeed = 0;
    
    if(keyboard_check(ord('A')) xor keyboard_check(vk_left))
    {
        if(x &gt; 50)
        {
            image_xscale = 1;
            hspeed = -3;
        }
    }
            
    if(keyboard_check(ord('D')) xor keyboard_check(vk_right))
    {
        if(x &lt; room_width - 50)
        {
            image_xscale = -1;
            hspeed = 3;
        }
    }
    
    if(keyboard_check(ord('W')) xor keyboard_check(vk_up))
    {
        if(y &gt; 50)
            vspeed = -3;
    }
    
    if(keyboard_check(ord('S')) xor keyboard_check(vk_down))
    {
        if(y &lt; room_height - sprite_height)
            vspeed = 3;
    }
    
    if(keyboard_check(ord('1')))
    {
        if(obj_hero_body.y &lt; y + 20 and obj_hero_body.y &gt; y - 20
            and distance_to_object(obj_hero_body) == 0)
        {
            state = "arise";        
            hspeed = 0;
            vspeed = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State = arise

if (state == "arise")
{
    sprite_index = spr_hero_death; 
    if(image_index &lt;= 0.2)
    {
        outsouled = false;
        image_speed = 0;
        state = "idle";
        with(obj_hero_body)
            instance_destroy();
        //instance_create(x, y, obj_hero_body);
    }
    else
        image_speed = -0.2;  
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hero jump via keyboard keys

if (state != "pause" and state != "outsouled_move"
    and (keyboard_check_pressed(ord("W")) xor keyboard_check_pressed(vk_up)))
{
    if (onGround)
    {
        state = "jump";
        vspeed = -22;
        jumped = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Aid has damaged

if (state == "half_damaged")
{
    if (alarm[0] == -1) 
        alarm[0] = 5; //Lerp-effect shader
}

if (state == "full_damaged")
{
    if (alarm[0] == -1)
        alarm[0] = 5; //Lerp-effect shader

    image_speed = 0.4;
    sprite_index = spr_hero_damage;    
}

if (maxhealth &gt; 3)
{
    image_blend = c_white;
}
else
{
    if (maxhealth &gt; 1)
        image_blend = color_warning;
    else
        image_blend = color_danger;
}

if (keyboard_check_released(ord("H"))) //Healing main_hero manually
{
    if (medical &gt; 1)
    {
        medical --;
        maxhealth = 4;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Weapons' behaviour

if (state == "idle" &amp;&amp; weapon != weapons.weapon_none)
{
    switch (weapon)
    {
        case weapons.weapon_fire:
            runicBullet = instance_create(x - image_xscale * 50, y - 116, obj_rune_1);
        break;
        
        case weapons.weapon_ice:
            runicBullet = instance_create(x - image_xscale * 50, y - 116, obj_rune_2);
        break;
    }
    
    if (image_xscale &gt; 0)
        runicBullet.direction = 180;
    else
        runicBullet.direction = 0;
    
    if ((maxenergy - 1) == 0)
    {
        weapon = weapons.weapon_none;
    }
    maxenergy --;
    runicBullet.speed = 18;
    runicBullet.xCreate = x;
    runicBullet.yCreate = y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw lerp-effect shader on main_hero

if (shader_is_compiled(shader_lerp))
{
    shader_set(shader_lerp);
    if (lerp_value &gt; 0)
    {
        lerp_value -= 0.1;
    }
    shader_set_uniform_f(colour_to_find, 1, 1, 1, lerp_value);
}
shader_reset();

if(outsouled){
    shader_set(shader_hero_soul);
    draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, 1, 0, c_white, 1);
    shader_reset();
}
else
{
    draw_self();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
