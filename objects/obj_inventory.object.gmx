<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_inventory_cell</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hidden = true;

mouse_take = false;
cell_num = 0;

temp = 0;

xx = 0;
yy = 0;

move_octopus = 0;

positions = 0;

for(var i = 0; i &lt; ds_list_size(global.inventory); i++)
{
    t = ds_list_find_value(global.inventory, i);
    if(t != 0)
    {
        t = instance_create(0, 0, asset_get_index(t));
        t.taken = true;
        ds_list_replace(global.inventory, i, t);
    }        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(var i = 0; i &lt; ds_list_size(global.inventory); i++)
{
    positions[i, 0] = view_xview[0] + 300 + 150 * cos((i * 45) * pi / 180);
    positions[i, 1] = view_yview[0] + 300 + 150 * sin((i * 45) * pi / 180);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!hidden)
{
    for(var i = 0; i &lt; ds_list_size(global.inventory); i++)
    {
         if(point_in_rectangle(mouse_x, mouse_y, 
            positions[i, 0] - sprite_width / 2, positions[i, 1] - sprite_width / 2,
            positions[i, 0] + sprite_width / 2, positions[i, 1] + sprite_width / 2))
         {
            var temp2 = ds_list_find_value(global.inventory, i);
            if(temp2 == 0)
            { 
                ds_list_replace(global.inventory, i, temp);
                ds_list_replace(global.inventory, cell_num, 0);
                break;
            }
            else
            {
                ds_list_replace(global.inventory, i, temp);
                ds_list_replace(global.inventory, cell_num, temp2);
                break;
            }
         }  
    }
    mouse_take = false;
    temp = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="55">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!hidden)
{
    for(var i = 0; i &lt; ds_list_size(global.inventory); i++)
    {   
        if(point_in_rectangle(mouse_x, mouse_y,
            positions[i, 0] - sprite_width / 2, positions[i, 1] - sprite_width / 2,
            positions[i, 0] + sprite_width / 2, positions[i, 1] + sprite_width / 2))
        {
            a = ds_list_find_value(global.inventory, i);
            ds_list_replace(global.inventory, i, 0);
            a.x = obj_mainhero.x;       
            a.y = obj_mainhero.y - 50;
            a.fallen = true;
            a.taken = false;
        }
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!hidden)
{
    if(!mouse_take)
    {
        for(var i = 0; i &lt; ds_list_size(global.inventory); i++)
        {
            xx = positions[i, 0];
            yy = positions[i, 1];
            if(point_in_rectangle(mouse_x, mouse_y, 
                xx - sprite_width / 2, yy - sprite_width / 2,
                xx + sprite_width / 2, yy + sprite_width / 2))
            {
    
                temp = ds_list_find_value(global.inventory, i);
                if(temp != 0)
                {
                    mouse_take = true;
                    cell_num = i;
                    old_x = x;
                    old_y = y;
                    move_octopus = 100;
                }
                break;
            }    
        }
    }
    else
    {
        if(temp != 0)
        {
            temp.x = mouse_x;
            temp.y = mouse_y;   
        }
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(var i = 0; i &lt; ds_list_size(global.inventory); i++)
{
    t = ds_list_find_value(global.inventory, i);
    if(t != 0)
    {
        t = object_get_name(t.object_index);
        ds_list_replace(global.inventory, i, t);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!hidden)
{
    for(var i = 0; i &lt; ds_list_size(global.inventory); i++)
    {   
        if(ds_list_find_value(global.inventory, i) != 0)
        {   
            temp_a = ds_list_find_value(global.inventory, i);
            if(mouse_take)
            {
                if(i != cell_num)
                {
                    temp_a.x = positions[i, 0];
                    temp_a.y = positions[i, 1];
                }
            }
            else
            {
                temp_a.x = positions[i, 0];
                temp_a.y = positions[i, 1];
            }
            if(temp_a.sprite_width &gt;= sprite_width
                xor temp_a.sprite_height &gt;= sprite_width)
            {
                if(temp_a.sprite_width &gt; temp_a.sprite_height)
                {
                    temp_a.image_xscale = sprite_width / temp_a.sprite_width * 0.8;   
                    temp_a.image_yscale = sprite_width / temp_a.sprite_width * 0.8;       
                }
                else
                {
                    temp_a.image_xscale = sprite_width / temp_a.sprite_height * 0.8;   
                    temp_a.image_yscale = sprite_width / temp_a.sprite_height * 0.8;
                }
            }
            draw_sprite_ext(temp_a.sprite_index, 0, 
                temp_a.x, temp_a.y,
                temp_a.image_xscale, temp_a.image_yscale,
                0, c_white, 1);
        }   
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!hidden)
{
    for(var i = 0; i &lt; ds_list_size(global.inventory); i++)
    {
        var colour = 0;
        if(i &lt; 4)
            colour = c_red;
        else
            colour = c_white;
            
        if(move_octopus &gt; 0 and cell_num = i)
        {
            move_octopus -= 5;
            draw_sprite_ext(spr_inventory_cell, 0,
                positions[i, 0],
                positions[i, 1],
                1, 1, random_range(-30, 30), colour, 1);
        }
        else
        {
            draw_sprite_ext(spr_inventory_cell, 0,
               positions[i, 0],
               positions[i, 1],
               1, 1, 0, colour, 1);
        }
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
