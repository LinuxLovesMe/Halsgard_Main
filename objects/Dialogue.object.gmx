<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Dialog</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create sliding text for dialogue box 

//Dialogue box 800x360
width = 600;
height = 300;
padding = 16;

//Starting line
start = ds_list_create();
ds_list_add(start, 0);

linesDisplayed = 10;

//Last space and current position
count = 0;
lastSpace = 0;
line = 0;

message = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam rhoncus lectus a ex imperdiet sodales. Phasellus vel scelerisque arcu. Etiam condimentum, ligula et iaculis pretium, nisi tellus finibus erat, sed ornare lectus lorem sed magna. Phasellus quis rhoncus orci, vitae eleifend ex. Vivamus hendrerit aliquet enim, at malesuada enim cursus at. Praesent viverra purus at placerat efficitur. Suspendisse vitae nibh mauris. Integer egestas suscipit ligula sit amet iaculis. Mauris porttitor dictum nisl non faucibus. Etiam at dignissim sem, eu ullamcorper est. Mauris id libero vitae dolor placerat vestibulum Aenean imperdiet libero tempor lacinia vehicula. Morbi eget metus eget quam dapibus scelerisque vitae eget nisl. Aliquam erat volutpat. Pellentesque sed justo vitae nulla tincidunt interdum. Interdum et malesuada fames ac ante ipsum primis in faucibus. Sed in odio eget ligula placerat pulvinar. Proin eget diam eget ligula mollis varius. Aliquam dapibus, nulla eget efficitur molestie, sapien nisl venenatis lacus, non luctus odio ipsum quis nunc. Nulla facilisi. Vestibulum rutrum enim non justo malesuada, id laoreet lacus venenatis. Duis nisl urna, maximus nec euismod suscipit, consequat eget dolor. Donec enim magna, porttitor sit amet efficitur sagittis, aliquam ac leo. Nullam malesuada nisi non convallis rhoncus. Sed efficitur metus ex, ut egestas urna ullamcorper sit amet. Vivamus tristique fermentum pharetra. Duis feugiat, nisi non dignissim dignissim, mi lorem molestie enim, sed commodo urna urna congue sapien. Nulla finibus metus aliquet iaculis consequat. Quisque eu nibh metus. Nullam porttitor nulla sem, vel finibus enim sollicitudin ac. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Nullam pellentesque, turpis et finibus sagittis, est neque ultricies ante, vehicula pharetra tellus nunc et tortor. Proin imperdiet orci id dolor lobortis porttitor.";
answer[0] = "#1: Praesent mollis luctus eros, ac pellentesque nibh porta vitae.";
answer[1] = "#2: Curabitur vel consectetur elit, quis placerat turpis. Mauris tempus sed nisl quis ultricies.";
answer[2] = "#3: In quis arcu lacinia, lobortis orci et, viverra dui.";


//Grid for answers
answersGrid = ds_grid_create(3, 2);
//first row
ds_grid_set(answersGrid, 0, 0, 0);
ds_grid_set(answersGrid, 0, 1, 0);
//second row
ds_grid_set(answersGrid, 1, 0, 0);
ds_grid_set(answersGrid, 1, 1, 0);
//third row
ds_grid_set(answersGrid, 2, 0, 0);
ds_grid_set(answersGrid, 2, 1, 0);
message = string_insert(answer[0], message, string_length(message));
message = string_insert(answer[1], message, string_length(message));
message = string_insert(answer[2], message, string_length(message));
str = "";

//Loop over all message symbol by symbol
while(count &lt; string_length(message)){
    //Transfer to next line if string is bigger than borders
    if(string_width(str) &gt; width + width / 3 - 2 * padding){
        //Replace space to #
        message = string_delete(message, lastSpace, 1);
        message = string_insert("#", message, lastSpace);
        ds_list_add(start, lastSpace + 1);
    }
    //Check if we reach the end of messgae
    if(string_char_at(message, count) == " "){
        lastSpace = count;
    }else if(string_char_at(message, count) == "#"){
        ds_list_add(start, count);   
    }
    count++;
    
    if(string_height(str) &gt; height - padding){
        line++;
    }
    //Prepare string
    str = string_copy(
        message, 
        ds_list_find_value(start, line), 
        count - ds_list_find_value(start, line)
    );
}
//Set line to an end of array - lines displayed
line = ds_list_size(start) - 1 - linesDisplayed;
//And prepare a string to draw on screen
str = string_copy(
        message, 
        ds_list_find_value(start, line), 
        count - ds_list_find_value(start, line)
);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create sliderbar
bar = instance_create(x + sprite_width - 30, y + sprite_height / 2, BarVert);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Answers
/*answer[0] = "1: Praesent mollis luctus eros, ac pellentesque nibh porta vitae.#";
answer[1] = "2: Curabitur vel consectetur elit, quis placerat turpis. Mauris tempus sed nisl quis ultricies.#";
answer[2] = "3: In quis arcu lacinia, lobortis orci et, viverra dui.#";

answers = ds_list_create();
ds_list_add(answers, 0);

linesDisplayed = 10;

countA = 0;
lastSpace = 0;
lineA = 0;

for(var i = 0; i &lt; 3; i++){
    str = "";
    countA = 0
    while(countA &lt; string_length(answer[i])){
        if(string_width(str) &gt; width + width / 3 - 2 * padding){
            answer[i] = string_delete(answer[i], lastSpace, 1);
            answer[i] = string_insert("#", answer[i], lastSpace);
            ds_list_add(answers, lastSpace + 1);
        }
        if(string_char_at(answer[i], countA) == " "){
            lastSpace = countA;
        }
        countA++;
        
        if(string_height(str) &gt; height - padding){
            lineA++;
        }
        
        str = string_copy(
            answer[i], 
            ds_list_find_value(answers, lineA), 
            countA - ds_list_find_value(answers, lineA)
        );
    }
}

show_debug_message(string_copy(
            answer[2], 
            ds_list_find_value(answers, lineA), 
            countA - ds_list_find_value(answers, lineA)
        ));

//ds_list_copy(start, answers);
ds_list_add(start, answers);
line = ds_list_size(start) - 1 - linesDisplayed;
count += countA;
str = string_copy(
        message, 
        ds_list_find_value(start, line), 
        count - ds_list_find_value(start, line)
);*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy ds_list
ds_list_destroy(start);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

draw_set_alpha(0.5);
draw_roundrect_colour(x + 150, y, x + 150 + width, y + height, c_gray, c_gray, false);
draw_set_alpha(1);

draw_set_colour(c_white);
/*
if(keyboard_check_pressed(ord("W"))){
    if(line &gt; 1){
        line--;
        str = string_copy(
            message, 
            ds_list_find_value(start, line), 
            ds_list_find_value(start, line + 8) - ds_list_find_value(start, line)
        );
    }
    if(line == 1){
        line--;
        str = string_copy(
            message, 
            ds_list_find_value(start, line), 
            ds_list_find_value(start, line + 8) - 1 - ds_list_find_value(start, line)
        );   
    }
}

if(keyboard_check_pressed(ord("S"))){
    if(line &lt; ds_list_size(start) - 9){
        line++;
        str = string_copy(
            message, 
            ds_list_find_value(start, line), 
            ds_list_find_value(start, line + 8) - ds_list_find_value(start, line)
        );
    }if(line == ds_list_size(start) - 9){
        line ++;
        str = string_copy(
            message, 
            ds_list_find_value(start, line), 
            count - ds_list_find_value(start, line)
        );
    }
}*/

line = (100 - bar.slider.percentage) / 100 * (ds_list_size(start) - 1 - linesDisplayed);
line = round(line);

topLine = 0;
downLine = 0;

if(line &lt; ds_list_size(start) - 1 - linesDisplayed){
    if(line == 0){
        topLine = line;
        downLine = line + linesDisplayed;
        str = string_copy(
            message, 
            ds_list_find_value(start, line), 
            ds_list_find_value(start, line + linesDisplayed)
            - 1 - ds_list_find_value(start, line)
        );   
    }else{
        topLine = line;
        downLine = line + linesDisplayed;
        str = string_copy(
            message, 
            ds_list_find_value(start, line), 
            ds_list_find_value(start, line + linesDisplayed)
            - ds_list_find_value(start, line)
        );
    }
}else if(line == ds_list_size(start) - 1 - linesDisplayed){
    topLine = line + 1;
    downLine = ds_list_size(start) - 1;
    str = string_copy(
        message, 
        ds_list_find_value(start, line + 1), 
        count - ds_list_find_value(start, line + 1)
    );
}

draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_font(Kramola);
//draw_text(x + 150 + padding, y + padding, str);

var j = 0;
for(var i = topLine; i &lt; downLine; i++){   
    
    str = string_copy(
            message,
            ds_list_find_value(start, i),
            ds_list_find_value(start, i + 1) - ds_list_find_value(start, i)
        );
        
    var hash = string_pos("#", str);
    if(hash != 0){
        str = string_delete(str, hash, 1);
        str = string_insert(" ", str, hash);
    }
    
    var answers = string_pos("1:", str);
    if(answers != 0){ 
        draw_line(x + 150 + padding, y + j * padding * 1.9,
            x + 700, y + j * padding * 1.9);
        draw_set_colour(c_red);
    }
    for(var a = 1; a &lt;= 3; a++){
        number = string_pos(string(a) + ":", str);
        if(number != 0){
            ds_grid_set(answersGrid, a - 1, 0, x + 150 + padding);
            ds_grid_set(answersGrid, a - 1, 1, y + j * padding * 1.9);
        }
    }
    draw_text(x + 150 + padding, y + j * padding * 1.9, str);
    j++;
}
if(point_in_rectangle(mouse_x, mouse_y,
    ds_grid_get(answersGrid, 0, 0),
    ds_grid_get(answersGrid, 0, 1),
    ds_grid_get(answersGrid, 1, 0) + 550, 
    ds_grid_get(answersGrid, 1, 1) )){
    
    draw_rectangle(
        ds_grid_get(answersGrid, 0, 0),
        ds_grid_get(answersGrid, 0, 1),
        ds_grid_get(answersGrid, 1, 0) + 550, 
        ds_grid_get(answersGrid, 1, 1),
        true);
}

if(point_in_rectangle(mouse_x, mouse_y,
    ds_grid_get(answersGrid, 1, 0),
    ds_grid_get(answersGrid, 1, 1),
    ds_grid_get(answersGrid, 2, 0) + 550, 
    ds_grid_get(answersGrid, 2, 1))){
    
    draw_rectangle(
        ds_grid_get(answersGrid, 1, 0),
        ds_grid_get(answersGrid, 1, 1),
        ds_grid_get(answersGrid, 2, 0) + 550, 
        ds_grid_get(answersGrid, 2, 1),
        true);  
}
if(point_in_rectangle(mouse_x, mouse_y,
    ds_grid_get(answersGrid, 2, 0),
    ds_grid_get(answersGrid, 2, 1),
    x + 150 + padding + 550, 
    y + j * padding * 1.9)){
    
    draw_rectangle(
        ds_grid_get(answersGrid, 2, 0),
        ds_grid_get(answersGrid, 2, 1),
        x + 150 + padding + 550, 
        y + j * padding * 1.9,
        true);
}
draw_set_colour(c_blue);
draw_text(x + 20, y + 10, "John Snow:");
draw_sprite(portrait, 0, x + 20, y + 40);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
